@{
    ViewData["Title"] = "Chat";
    Layout = "_Layout";
}

@section Styles {
    <style>
        :root {
            --primary: #4169E1;
            --secondary: #87CEFA;
            --light: #f5f7fb;
        }

        body, html {
            height: 100%;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .mm-nav {
            background: linear-gradient(90deg, var(--primary), var(--secondary));
        }

        .navbar .navbar-brand {
            font-weight: 800;
            letter-spacing: .3px;
        }

        .avatar-sm {
            width: 42px;
            height: 42px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid rgba(255, 255, 255, .6);
        }

        .chat-container {
            height: calc(100vh - 56px);
            display: flex;
            flex-direction: column;
        }

        .chat-sidebar {
            background: #fff;
            border-right: 1px solid #dee2e6;
            overflow-y: auto;
            height: 100%;
        }

        .chat-main {
            background: #f9fbff;
            display: flex;
            flex-direction: column;
            height: 100%;
            min-height: 0;
        }

        .message {
            margin-bottom: 12px;
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            position: relative;
            font-size: 14px;
            line-height: 1.4;
        }

        .message.sent {
            background: var(--primary);
            color: #fff;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }

        .message.received {
            background: #fff;
            border: 1px solid #eaeef6;
            margin-right: auto;
            border-bottom-left-radius: 4px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message small {
            display: block;
            font-size: 11px;
            margin-top: 4px;
            opacity: 0.8;
        }

        .message.sent small {
            color: rgba(255,255,255,0.8);
        }

        .message.received small {
            color: #6c757d;
        }

        .chat-input {
            background: #fff;
            border-top: 1px solid #dee2e6;
            padding: 16px;
            flex-shrink: 0;
            position: sticky;
            bottom: 0;
            z-index: 10;
        }

        .conversation-item {
            border: none;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .conversation-item:last-child {
            border-bottom: none;
        }

        .conversation-item:hover {
            background-color: #f8f9fa;
        }

        .conversation-item.active {
            background-color: #e9ecef;
        }

        .unread-badge {
            background: var(--primary);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: 600;
        }

        .user-status {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #28a745;
            position: absolute;
            bottom: 0;
            right: 0;
            border: 2px solid white;
        }

        .user-offline {
            background-color: #6c757d;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            min-height: 0;
            max-height: calc(100vh - 200px);
        }

        .typing-indicator {
            display: flex;
            padding: 12px 16px;
            background: #fff;
            border-radius: 18px;
            margin-bottom: 12px;
            max-width: 70px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: #6c757d;
            border-radius: 50%;
            margin: 0 2px;
            animation: typingAnimation 1.4s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        .message-menu {
            position: absolute;
            top: 5px;
            right: 5px;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .message:hover .message-menu {
            opacity: 1;
        }

        .last-seen {
            font-size: 12px;
            color: #6c757d;
        }

        .unread-badge {
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 2px 6px;
            font-size: 10px;
            font-weight: bold;
        }

        .user-status {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            background-color: #28a745;
            border: 2px solid white;
            border-radius: 50%;
        }

        .user-status.user-offline {
            background-color: #6c757d;
        }

        .message-menu {
            position: absolute;
            top: 5px;
            right: 5px;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .message:hover .message-menu {
            opacity: 1;
        }

        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            color: #6c757d;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #6c757d;
            margin: 0 2px;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .chat-container {
                height: calc(100vh - 60px);
            }
            
            .chat-sidebar {
                width: 100%;
                max-width: 300px;
                position: fixed;
                left: -100%;
                top: 60px;
                height: calc(100vh - 60px);
                z-index: 1000;
                transition: left 0.3s ease;
            }
            
            .chat-sidebar.show {
                left: 0;
            }
            
            .chat-main {
                width: 100%;
            }
            
            .chat-header {
                padding: 0.75rem;
            }
            
            .chat-messages {
                height: calc(100vh - 200px);
                max-height: calc(100vh - 200px);
            }
            
            .chat-input {
                padding: 0.75rem;
            }
        }

        @@media (max-width: 576px) {
            .chat-container {
                height: calc(100vh - 56px);
            }
            
            .chat-sidebar {
                top: 56px;
                height: calc(100vh - 56px);
            }
            
            .chat-messages {
                height: calc(100vh - 180px);
                max-height: calc(100vh - 180px);
                padding: 0.5rem;
            }
            
            .message {
                max-width: 85%;
                margin-bottom: 0.75rem;
            }
            
            .message-content {
                padding: 0.5rem 0.75rem;
                font-size: 0.9rem;
            }
            
            .chat-input {
                padding: 0.5rem;
            }
            
            .btn {
                padding: 0.375rem 0.75rem;
                font-size: 0.875rem;
            }
        } */
    </style>
}

    <!-- Chat Layout -->
    <div class="container-fluid chat-container">
        <div class="row h-100">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-3 chat-sidebar" id="chatSidebar">
                <div class="p-3 border-bottom fw-semibold d-flex justify-content-between align-items-center">
                    <span>Conversations</span>
                    <div>
                        <button id="refreshUsers" class="btn btn-sm btn-outline-primary me-2" title="Refresh">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                        <button id="newChat" class="btn btn-sm btn-outline-success" title="New Chat">
                            <i class="bi bi-plus-lg"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary d-md-none" onclick="toggleSidebar()" title="Close">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                </div>
                <div id="usersList" class="list-group list-group-flush">
                    <div class="text-center p-3">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2 text-muted">Loading users...</span>
                    </div>
                </div>
            </div>

            <!-- Messages -->
            <div class="col-md-9 col-lg-9 d-flex flex-column chat-main">
                <div class="p-3 border-bottom fw-semibold d-flex justify-content-between align-items-center" id="chatHeader">
                    <div class="d-flex align-items-center">
                        <button class="btn btn-sm btn-outline-secondary me-2 d-md-none" onclick="toggleSidebar()" title="Menu">
                            <i class="bi bi-list"></i>
                        </button>
                    <span>Select a conversation</span>
                    </div>
                    <div id="chatActions" class="d-none">
                        <button class="btn btn-sm btn-outline-secondary me-2" id="loadMoreMessages" title="Load more messages">
                            <i class="bi bi-clock-history"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" id="clearChat" title="Clear chat">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>

                <div id="chatMessages" class="messages-container">
                    <div class="text-center text-muted mt-5">
                        <i class="bi bi-chat-dots" style="font-size: 3rem;"></i>
                        <p class="mt-3">Select a user to start chatting</p>
                    </div>
                </div>

                <div id="typingIndicator" class="typing-indicator d-none">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>

                <form id="chatForm" class="chat-input d-flex gap-2 d-none">
                    <div class="flex-grow-1 position-relative">
                        <input id="chatText" type="text" class="form-control" placeholder="Type your message..." required />
                        <div class="position-absolute top-50 end-0 translate-middle-y me-2">
                            <button type="button" class="btn btn-sm btn-link text-muted" id="emojiButton">
                                <i class="bi bi-emoji-smile"></i>
                            </button>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary" id="sendButton">
                        <i class="bi bi-send"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>

    <!-- Hidden elements for data -->
    <input type="hidden" id="currentUserId" value="@ViewBag.UserId" />
    <input type="hidden" id="currentUserName" value="@ViewBag.UserName" />
    <input type="hidden" id="currentUserRole" value="@ViewBag.UserRole" />

@section Scripts {
    <script>
        // نظام الشات الكامل
        class ChatSystem {
            constructor() {
                this.currentUser = null;
                this.activeChatUser = null;
                this.chatUsers = [];
                this.messages = [];
                this.isOnline = navigator.onLine;
                this.isTyping = false;
                this.lastMessageDate = null;

                this.initialize();
            }

            async initialize() {
                await this.loadCurrentUser();
                this.setupEventListeners();
                this.setupOnlineStatus();
                await this.loadChatUsers();
                await this.loadUnreadCount();
                this.startMessagePolling();
            }

            async loadCurrentUser() {
                this.currentUser = {
                    id: parseInt(document.getElementById('currentUserId').value),
                    name: document.getElementById('currentUserName').value,
                    role: document.getElementById('currentUserRole').value
                };
            }

            setupEventListeners() {
                // النقر على المستخدمين
                document.addEventListener('click', (e) => {
                    const userElement = e.target.closest('[data-user-id]');
                    if (userElement) {
                        const userId = parseInt(userElement.dataset.userId);
                        const user = this.chatUsers.find(u => u.userId === userId);
                        if (user) this.openChat(user);
                    }
                });

                // إرسال الرسالة
                document.getElementById('chatForm').addEventListener('submit', (e) => this.sendMessage(e));

                // تحديث القائمة
                document.getElementById('refreshUsers').addEventListener('click', () => this.loadChatUsers());

                // تحميل المزيد من الرسائل
                document.getElementById('loadMoreMessages').addEventListener('click', () => this.loadMoreMessages());

                // مسح الدردشة
                document.getElementById('clearChat').addEventListener('click', () => this.clearChat());

                // كتابة الرسالة
                document.getElementById('chatText').addEventListener('input', () => this.handleTyping());
                
                // Keyboard shortcuts
                document.getElementById('chatText').addEventListener('keydown', (e) => this.handleKeyDown(e));

                // الأزرار الإضافية
                document.getElementById('newChat').addEventListener('click', () => this.newChat());
                document.getElementById('emojiButton').addEventListener('click', () => this.toggleEmojiPicker());
            }

            setupOnlineStatus() {
                window.addEventListener('online', () => this.handleOnlineStatusChange(true));
                window.addEventListener('offline', () => this.handleOnlineStatusChange(false));
                setInterval(() => this.checkOnlineStatus(), 30000);
            }

            async loadChatUsers() {
                try {
                    this.showLoading('usersList', 'Loading conversations...');

                    const response = await fetch('/Chat/GetChatUsers');
                    const result = await response.json();

                    if (result.success) {
                        this.chatUsers = result.data;
                        this.renderChatUsers();
                    } else {
                        this.showError('usersList', result.message);
                    }
                } catch (error) {
                    console.error('Error loading users:', error);
                    this.showError('usersList', 'Failed to load conversations');
                }
            }

            async loadAllUsers() {
                try {
                    const response = await fetch('/Chat/GetAllUsers');
                    const result = await response.json();

                    if (result.success) {
                        return result.data;
                    } else {
                        console.error('Error loading all users:', result.message);
                        return [];
                    }
                } catch (error) {
                    console.error('Error loading all users:', error);
                    return [];
                }
            }

            renderChatUsers() {
                const usersListEl = document.getElementById('usersList');
                usersListEl.innerHTML = '';

                if (this.chatUsers.length === 0) {
                    usersListEl.innerHTML = '<div class="p-3 text-center text-muted">No users found</div>';
                    return;
                }

                this.chatUsers.forEach(user => {
                    const userEl = this.createUserElement(user);
                    usersListEl.appendChild(userEl);
                });
            }

            createUserElement(user) {
                const userEl = document.createElement('div');
                userEl.className = 'list-group-item list-group-item-action conversation-item d-flex align-items-center gap-3';
                userEl.dataset.userId = user.userId;

                const lastMessageTime = user.lastMessage ? this.formatTime(user.lastMessage.sentAt) : '';
                const lastMessageContent = user.lastMessage ?
                    (user.lastMessage.content.length > 25 ?
                     user.lastMessage.content.substring(0, 25) + '...' :
                     user.lastMessage.content) :
                    'No messages yet';

                userEl.innerHTML = `
                    <div class="position-relative">
                        <img src="${user.avatarUrl}" class="avatar-sm" alt="${user.fullName}">
                        <span class="user-status ${Math.random() > 0.5 ? '' : 'user-offline'}"></span>
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">${user.fullName}</h6>
                            ${user.unreadCount > 0 ? `<span class="unread-badge">${user.unreadCount}</span>` : ''}
                        </div>
                        <small class="text-muted d-block">${lastMessageContent}</small>
                        <small class="text-muted">${lastMessageTime}</small>
                    </div>
                    <small class="text-muted text-nowrap">${user.role}</small>
                `;

                return userEl;
            }

            async openChat(user) {
                this.activeChatUser = user;
                this.messages = [];
                this.lastMessageDate = null;

                // تحديث الواجهة
                this.updateChatHeader(user);
                this.showChatInterface();

                // تحميل الرسائل
                await this.loadMessages();
            }

            async loadMessages(before = null) {
                try {
                    this.showLoading('chatMessages', 'Loading messages...');

                    let url = `/Chat/GetMessages?otherUserId=${this.activeChatUser.userId}`;
                    if (before) {
                        url += `&before=${before.toISOString()}`;
                    }

                    const response = await fetch(url);
                    const result = await response.json();

                    if (result.success) {
                        if (before) {
                            // إضافة الرسائل في البداية للتحميل التقدمي
                            this.messages = [...result.data.reverse(), ...this.messages];
                        } else {
                            this.messages = result.data;
                        }

                        this.renderMessages();

                        if (this.messages.length > 0) {
                            this.lastMessageDate = new Date(this.messages[0].sentAt);
                        }
                    } else {
                        this.showError('chatMessages', result.message);
                    }
                } catch (error) {
                    console.error('Error loading messages:', error);
                    this.showError('chatMessages', 'Failed to load messages');
                }
            }

            renderMessages() {
                const messagesContainer = document.getElementById('chatMessages');
                messagesContainer.innerHTML = '';

                if (this.messages.length === 0) {
                    messagesContainer.innerHTML = `
                        <div class="text-center text-muted mt-5">
                            <i class="bi bi-chat" style="font-size: 2rem;"></i>
                            <p class="mt-2">No messages yet. Start the conversation!</p>
                        </div>
                    `;
                    return;
                }

                this.messages.forEach(message => {
                    const messageElement = this.createMessageElement(message);
                    messagesContainer.appendChild(messageElement);
                });

                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            createMessageElement(message) {
                const isSent = message.senderId === this.currentUser.id;
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
                messageDiv.dataset.messageId = message.messageId;

                const time = this.formatTime(message.sentAt);
                const statusIcon = isSent ? this.getMessageStatusIcon(message) : '';
                
                messageDiv.innerHTML = `
                    <div class="message-content">${this.escapeHtml(message.content)}</div>
                    <div class="d-flex justify-content-between align-items-center">
                    <small>${time}</small>
                        ${statusIcon}
                    </div>
                    ${isSent ? `
                        <div class="message-menu">
                            <button class="btn btn-sm btn-link text-light p-0" onclick="chatSystem.deleteMessage(${message.messageId})" title="Delete message">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    ` : ''}
                `;

                return messageDiv;
            }

            getMessageStatusIcon(message) {
                if (message.isRead) {
                    return '<i class="bi bi-check2-all text-primary" title="Read"></i>';
                } else {
                    return '<i class="bi bi-check text-muted" title="Sent"></i>';
                }
            }

            async sendMessage(event) {
                event.preventDefault();

                if (!this.activeChatUser) return;

                const messageInput = document.getElementById('chatText');
                const content = messageInput.value.trim();

                if (!content) return;

                try {
                    const response = await fetch('/Chat/SendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            ReceiverId: this.activeChatUser.userId,
                            Content: content
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // إضافة الرسالة إلى الواجهة
                        this.messages.push(result.data);
                        this.renderMessages();

                        // مسح حقل الإدخال
                        messageInput.value = '';

                        // تحديث قائمة المستخدمين
                        await this.loadChatUsers();
                    } else {
                        alert('Failed to send message: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('Error sending message');
                }
            }

            async deleteMessage(messageId) {
                if (!confirm('Are you sure you want to delete this message?')) return;

                try {
                    const response = await fetch('/Chat/DeleteMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ MessageId: messageId })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // إزالة الرسالة من الواجهة
                        this.messages = this.messages.filter(m => m.messageId !== messageId);
                        this.renderMessages();
                    } else {
                        alert('Failed to delete message: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error deleting message:', error);
                    alert('Error deleting message');
                }
            }

            async loadMoreMessages() {
                if (this.lastMessageDate) {
                    await this.loadMessages(this.lastMessageDate);
                }
            }

            async loadUnreadCount() {
                try {
                    const response = await fetch('/Chat/GetUnreadCount');
                    const result = await response.json();

                    if (result.success) {
                        const badge = document.getElementById('notificationBadge');
                        if (result.data > 0) {
                            badge.textContent = result.data;
                            badge.classList.remove('d-none');
                        } else {
                            badge.classList.add('d-none');
                        }
                    }
                } catch (error) {
                    console.error('Error loading unread count:', error);
                }
            }

            // الدوال المساعدة
            showLoading(elementId, message) {
                const element = document.getElementById(elementId);
                element.innerHTML = `
                    <div class="text-center p-3">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2 text-muted">${message}</span>
                    </div>
                `;
            }

            showError(elementId, message) {
                const element = document.getElementById(elementId);
                element.innerHTML = `
                    <div class="p-3 text-center text-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        <p class="mt-2">${message}</p>
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="chatSystem.loadChatUsers()">
                            <i class="bi bi-arrow-clockwise"></i> Try Again
                        </button>
                    </div>
                `;
            }

            updateChatHeader(user) {
                const chatHeader = document.getElementById('chatHeader');
                chatHeader.innerHTML = `
                    <span>Chat with ${user.fullName} (${user.role})</span>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary me-2" id="loadMoreMessages" title="Load more messages">
                            <i class="bi bi-clock-history"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" id="clearChat" title="Clear chat">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                `;

                // إعادة إرفاق event listeners
                document.getElementById('loadMoreMessages').addEventListener('click', () => this.loadMoreMessages());
                document.getElementById('clearChat').addEventListener('click', () => this.clearChat());
            }

            showChatInterface() {
                document.getElementById('chatForm').classList.remove('d-none');
                document.getElementById('chatActions').classList.remove('d-none');
            }

            formatTime(dateString) {
                const date = new Date(dateString);
                const now = new Date();
                const diff = now - date;
                const days = Math.floor(diff / (1000 * 60 * 60 * 24));

                if (days === 0) {
                    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                } else if (days === 1) {
                    return 'Yesterday ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                } else if (days < 7) {
                    return date.toLocaleDateString([], { weekday: 'short', hour: '2-digit', minute: '2-digit' });
                } else {
                    return date.toLocaleDateString([], { year: 'numeric', month: 'short', day: 'numeric' });
                }
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            handleOnlineStatusChange(online) {
                this.isOnline = online;
                const statusIndicator = document.getElementById('onlineStatus');
                if (statusIndicator) {
                    statusIndicator.className = online ? 'user-status' : 'user-status user-offline';
                    statusIndicator.title = online ? 'Online' : 'Offline';
                }
            }

            checkOnlineStatus() {
                this.isOnline = navigator.onLine;
                this.handleOnlineStatusChange(this.isOnline);
            }

            handleTyping() {
                // يمكن تطوير هذه الوظيفة لإرسال إشعار الكتابة
                if (!this.isTyping) {
                    this.isTyping = true;
                    // إرسال إشعار الكتابة إلى الخادم
                }
            }

            async newChat() {
                try {
                    const allUsers = await this.loadAllUsers();
                    if (allUsers.length === 0) {
                        alert('No users available for new chat');
                        return;
                    }

                    // Create a simple modal or dropdown to select user
                    const userList = allUsers.map(user => 
                        `<div class="list-group-item list-group-item-action" data-user-id="${user.userId}" style="cursor: pointer;">
                            <div class="d-flex align-items-center gap-3">
                                <img src="${user.avatarUrl}" class="avatar-sm" alt="${user.fullName}">
                                <div>
                                    <h6 class="mb-0">${user.fullName}</h6>
                                    <small class="text-muted">${user.role}</small>
                                </div>
                            </div>
                        </div>`
                    ).join('');

                    const modalHtml = `
                        <div class="modal fade" id="newChatModal" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Start New Chat</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="list-group">
                                            ${userList}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                    // Remove existing modal if any
                    const existingModal = document.getElementById('newChatModal');
                    if (existingModal) {
                        existingModal.remove();
                    }

                    // Add modal to body
                    document.body.insertAdjacentHTML('beforeend', modalHtml);

                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('newChatModal'));
                    modal.show();

                    // Add click handlers for user selection
                    document.querySelectorAll('#newChatModal [data-user-id]').forEach(item => {
                        item.addEventListener('click', (e) => {
                            const userId = parseInt(e.currentTarget.dataset.userId);
                            const user = allUsers.find(u => u.userId === userId);
                            if (user) {
                                this.openChat(user);
                                modal.hide();
                            }
                        });
                    });

                } catch (error) {
                    console.error('Error starting new chat:', error);
                    alert('Error loading users for new chat');
                }
            }

            toggleEmojiPicker() {
                // يمكن إضافة منتقي الإيموجي هنا
                alert('Emoji picker will be implemented here');
            }

            startMessagePolling() {
                // Poll for new messages every 5 seconds
                setInterval(async () => {
                    if (this.activeChatUser) {
                        await this.checkForNewMessages();
                    }
                    await this.loadUnreadCount();
                }, 5000);
            }

            async checkForNewMessages() {
                try {
                    const response = await fetch(`/Chat/GetMessages?otherUserId=${this.activeChatUser.userId}`);
                    const result = await response.json();

                    if (result.success && result.data.length > 0) {
                        const newMessages = result.data.filter(newMsg => 
                            !this.messages.some(existingMsg => existingMsg.messageId === newMsg.messageId)
                        );

                        if (newMessages.length > 0) {
                            this.messages = [...this.messages, ...newMessages];
                            this.renderMessages();
                        }
                    }
                } catch (error) {
                    console.error('Error checking for new messages:', error);
                }
            }

            showTypingIndicator() {
                const indicator = document.getElementById('typingIndicator');
                if (indicator) {
                    indicator.classList.remove('d-none');
                }
            }

            hideTypingIndicator() {
                const indicator = document.getElementById('typingIndicator');
                if (indicator) {
                    indicator.classList.add('d-none');
                }
            }

            handleKeyDown(event) {
                // Send message on Enter key (but not Shift+Enter)
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    this.sendMessage(event);
                }
                
                // Focus on message input when typing starts
                if (event.key.length === 1) { // Single character
                    const messageInput = document.getElementById('chatText');
                    if (messageInput && !messageInput.matches(':focus')) {
                        messageInput.focus();
                    }
                }
            }


            async clearChat() {
                if (!this.activeChatUser) return;
                
                if (confirm('Are you sure you want to delete this entire chat? This will permanently delete all messages between you and this user.')) {
                    try {
                        const response = await fetch('/Chat/DeleteChat', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ OtherUserId: this.activeChatUser.userId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            this.messages = [];
                            this.renderMessages();
                            // Reload chat users to update the sidebar
                            await this.loadChatUsers();
                            alert('Chat deleted successfully');
                        } else {
                            alert('Failed to delete chat: ' + result.message);
                        }
                    } catch (error) {
                        console.error('Error deleting chat:', error);
                        alert('Error deleting chat');
                    }
                }
            }
        }

        // تهيئة النظام عند تحميل الصفحة
        let chatSystem;
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize navbar dropdowns first
            if (typeof window.initializeDropdowns === 'function') {
                window.initializeDropdowns();
            }
            
            // Wait a bit for navbar to initialize, then start chat system
            setTimeout(() => {
                chatSystem = new ChatSystem();
            }, 100);
        });

        // جعل النظام متاحاً globally للوظائف التي تستدعي من onclick
        window.chatSystem = chatSystem;

        // Mobile sidebar toggle function
        function toggleSidebar() {
            const sidebar = document.getElementById('chatSidebar');
            if (sidebar) {
                sidebar.classList.toggle('show');
            }
        }

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('chatSidebar');
            const menuButton = event.target.closest('[onclick="toggleSidebar()"]');
            
            if (sidebar && sidebar.classList.contains('show') && !menuButton && !sidebar.contains(event.target)) {
                sidebar.classList.remove('show');
            }
        });
    </script>
}