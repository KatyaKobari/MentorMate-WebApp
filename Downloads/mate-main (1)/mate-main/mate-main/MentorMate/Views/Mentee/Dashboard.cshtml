@model MentorMate.ViewModels.MenteeDashboardViewModel
@{
    ViewData["Title"] = "Mentee Dashboard";
    Layout = "_Layout";
}

@section Styles {
    <style>
        .page-header {
            border-bottom: 1px solid #e9ecef;
            padding-bottom: 1rem;
        }

        .filter-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 1.5rem;
        }

        .mentor-card {
            border: 1px solid #e9ecef;
            border-radius: 12px;
            transition: all 0.2s;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .mentor-card:hover {
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                transform: translateY(-2px);
            }

        .mentor-card .card-header {
            flex-shrink: 0;
        }

        .mentor-card .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .mentor-card .card-content {
            flex: 1;
        }

        .mentor-card .card-actions {
            margin-top: auto;
        }

        .mentor-card .tags-container {
            min-height: 2.5rem;
            display: flex;
            flex-wrap: wrap;
            align-items: flex-start;
        }

        .mentor-card .tags-container:empty::after {
            content: '';
            display: block;
            height: 1.5rem;
        }

        .btn-success:disabled {
            opacity: 0.8;
            cursor: not-allowed;
        }

        .btn-outline-success {
            border-color: #198754;
            color: #198754;
        }

        .btn-outline-success:hover {
            background-color: #198754;
            border-color: #198754;
            color: white;
        }

        .mentor-card .card-actions .d-flex {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .mentor-card .card-actions .btn {
            flex: 1;
            min-width: 0;
        }

        .mentor-card .card-actions .btn:not(.flex-fill) {
            flex: 0 0 auto;
            width: auto;
        }

        .avatar-sm {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            object-fit: cover;
        }

        .badge-soft {
            background-color: #e9ecef;
            color: #495057;
            padding: 0.35em 0.65em;
        }

        .counter {
            font-size: 0.875rem;
            color: #6c757d;
        }
        
        .quick-filters {
            border-top: 1px solid #e9ecef;
            padding-top: 1rem;
        }
        
        .quick-filter-btn {
            transition: all 0.2s ease;
            border-radius: 20px;
        }
        
        .quick-filter-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(65, 105, 225, 0.3);
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .filter-card {
                padding: 1rem;
            }
            
            .mentor-card {
                margin-bottom: 1rem;
            }
            
            .mentor-card .card-header {
                padding: 1rem;
            }
            
            .mentor-card .card-body {
                padding: 1rem;
            }
            
            .row {
                margin: 0;
            }
            
            .col-md-4, .col-md-8 {
                padding: 0.5rem;
            }
        }

        @@media (max-width: 576px) {
            .container {
                padding: 0.5rem;
            }
            
            .page-header h1 {
                font-size: 1.5rem;
            }
            
            .mentor-card .card-header {
                padding: 0.75rem;
            }
            
            .mentor-card .card-body {
                padding: 0.75rem;
            }
            
            .mentor-card .tags-container {
                min-height: 2rem;
            }
            
            .btn-sm {
                font-size: 0.8rem;
                padding: 0.25rem 0.5rem;
            }
            
            .d-flex.justify-content-between {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .mentor-card .card-actions .d-flex {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .mentor-card .card-actions .btn {
                width: 100%;
                flex: none;
            }
        }
    </style>
}

    <!-- Header -->
    <div class="container page-header mt-4">
        <div class="d-flex align-items-end justify-content-between">
            <div>
                <h1 class="h3 mb-1">Find your mentor</h1>
                <p class="text-muted mb-0">ابحث، فلتر، واحجز جلسة إرشاد بسهولة ✨</p>
            </div>
            <div class="counter">Showing @(Model?.Mentors?.Count ?? 0) mentors</div>
        </div>
    </div>

    <!-- Filters -->
    <div class="container mt-4">
        <form method="get" asp-controller="MenteeDashboard" asp-action="Index">
            <div class="filter-card mb-4">
                <div class="row g-2 align-items-end">
                    <div class="col-md-4">
                        <label class="form-label small text-muted">Search</label>
                        <input name="search" type="text" class="form-control" placeholder="Name, skill, keyword..." value="@Model?.SearchTerm">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label small text-muted">Expertise</label>
                        <select name="expertise" class="form-select" id="expertiseFilter">
                            <option value="">All Expertise</option>
                            @foreach (var exp in ViewBag.ExpertiseList ?? Enumerable.Empty<string>())
                            {
                                <option value="@exp" selected="@(exp == Model?.SelectedExpertise)">@exp</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label small text-muted">Min. Years</label>
                        <select name="minYears" class="form-select">
                            <option value="0" selected="@(0 == Model?.SelectedMinYears)">0+</option>
                            <option value="1" selected="@(1 == Model?.SelectedMinYears)">1+</option>
                            <option value="3" selected="@(3 == Model?.SelectedMinYears)">3+</option>
                            <option value="5" selected="@(5 == Model?.SelectedMinYears)">5+</option>
                            <option value="8" selected="@(8 == Model?.SelectedMinYears)">8+</option>
                            <option value="10" selected="@(10 == Model?.SelectedMinYears)">10+</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label small text-muted">Sort by</label>
                        <select name="sortBy" class="form-select">
                            <option value="featured" selected="@("featured" == Model?.SelectedSortBy)">Featured</option>
                            <option value="rating" selected="@("rating" == Model?.SelectedSortBy)">Rating (High → Low)</option>
                            <option value="experience" selected="@("experience" == Model?.SelectedSortBy)">Experience (High → Low)</option>
                            <option value="name" selected="@("name" == Model?.SelectedSortBy)">Name (A → Z)</option>
                        </select>
                    </div>
                </div>
                <div class="d-flex gap-2 mt-3">
                    <button type="submit" class="btn btn-primary"><i class="bi bi-funnel me-1"></i> Apply</button>
                    <a asp-controller="MenteeDashboard" asp-action="Index" class="btn btn-outline-primary"><i class="bi bi-x-circle me-1"></i> Clear</a>
                </div>
            </div>
        </form>
    </div>

    <!-- Grid -->
    <div class="container">
        <div class="row g-3">
            @if (Model?.Mentors != null && Model.Mentors.Any())
            {
                @foreach (var mentor in Model.Mentors)
                {
                    <div class="col-12 col-md-6 col-lg-4">
                        <div class="mentor-card h-100">
                            <div class="card-header p-3 d-flex align-items-center">
                                <img src="@mentor.AvatarUrl" class="avatar-sm me-3" alt="@mentor.Name">
                                <div>
                                    <div class="d-flex align-items-center gap-2">
                                        <h6 class="mb-0">@mentor.Name</h6>
                                        <span class="badge badge-soft rounded-pill">@mentor.Expertise</span>
                                    </div>
                                    <div class="small text-muted mt-1">
                                        <span class="me-2"><i class="bi bi-briefcase me-1"></i>@mentor.Years yrs</span>
                                        <span class="rating"><i class="bi bi-star-fill"></i> @mentor.Rating.ToString("0.0")</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body px-3 pb-3">
                                <div class="card-content">
                                    <div class="tags-container gap-2 mb-3">
                                        @foreach (var tag in mentor.Tags?.Take(3) ?? Enumerable.Empty<string>())
                                        {
                                            <span class="badge text-bg-light">@tag</span>
                                        }
                                    </div>
                                </div>
                                <div class="card-actions">
                                    <div class="d-flex gap-2">
                                        @if (mentor.HasExistingRelationship)
                                        {
                                            <button class="btn btn-success flex-fill" disabled>
                                                <i class="bi bi-check-circle me-1"></i> Connected
                                            </button>
                                            <a asp-controller="Mentor" asp-action="Profile" asp-route-id="@mentor.Id" class="btn btn-outline-primary" title="View Profile">
                                                <i class="bi bi-person-lines-fill"></i>
                                            </a>
                                            <a asp-controller="Chat" asp-action="Index" class="btn btn-outline-success" title="Start Chat">
                                                <i class="bi bi-chat-dots"></i>
                                            </a>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary flex-fill request-btn" data-bs-toggle="modal" data-bs-target="#requestModal" data-mentor-id="@mentor.Id" data-mentor-name="@mentor.Name">
                                                <i class="bi bi-calendar2-check me-1"></i> Request Session
                                            </button>
                                            <a asp-controller="Mentor" asp-action="Profile" asp-route-id="@mentor.Id" class="btn btn-outline-primary" title="View profile">
                                                <i class="bi bi-person-lines-fill"></i>
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="text-center mt-5 text-muted">
                        <i class="bi bi-search" style="font-size: 3rem;"></i>
                        <p class="mt-3">No mentors found matching your criteria</p>
                        <a asp-controller="MenteeDashboard" asp-action="Index" class="btn btn-primary mt-2">Clear Filters</a>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Request Modal -->
    <div class="modal fade" id="requestModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Request Session with <span id="modalMentorName"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form method="post" asp-controller="MenteeDashboard" asp-action="RequestSession" id="requestForm">
                    <div class="modal-body">
                        <input type="hidden" name="mentorId" id="mentorId">
                        <input type="hidden" name="date" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                        <input type="hidden" name="time" value="@DateTime.Now.ToString("HH:mm")">
                        <input type="hidden" name="type" value="Chat Session">
                        
                        <div class="mb-4">
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle me-2"></i>
                                <strong>How it works:</strong> Send a mentorship request to start chatting with this mentor. Once approved, you can communicate directly through the chat system.
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-chat-text me-2"></i>Tell the mentor about yourself and what you'd like to learn:
                            </label>
                            <textarea name="message" class="form-control" rows="4" placeholder="Hi! I'm interested in learning from you because... I'm particularly interested in... I hope we can work together on..." required></textarea>
                            <div class="form-text">This message will help the mentor understand your goals and interests.</div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Send Request</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Toast -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto">MentorMate</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastMsg"></div>
        </div>
    </div>

    <script>
        // Dashboard specific functionality
        function addQuickFilters() {
            const quickFilters = [
                'Data Science', 'Web Development', 'Machine Learning', 'UI/UX Design', 'Mobile Development'
            ];
            
            const filterCard = document.querySelector('.filter-card');
            if (filterCard) {
                const quickFilterDiv = document.createElement('div');
                quickFilterDiv.className = 'quick-filters mt-3';
                quickFilterDiv.innerHTML = `
                    <div class="d-flex flex-wrap gap-2 align-items-center">
                        <span class="small text-muted me-2">Quick filters:</span>
                        ${quickFilters.map(filter => 
                            `<button type="button" class="btn btn-sm btn-outline-primary quick-filter-btn" data-expertise="${filter}">${filter}</button>`
                        ).join('')}
                    </div>
                `;
                
                filterCard.appendChild(quickFilterDiv);
                
                // Add click handlers for quick filters
                document.querySelectorAll('.quick-filter-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const expertise = this.getAttribute('data-expertise');
                        document.getElementById('expertiseFilter').value = expertise;
                        // Auto-submit the form
                        document.querySelector('form').submit();
                    });
                });
            }
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize navbar dropdowns
            if (typeof window.initializeNavbarDropdowns === 'function') {
                window.initializeNavbarDropdowns();
            }
            
            // Add quick filter buttons for popular expertise
            addQuickFilters();
            
            // Check if we need to auto-open request modal
            const requestMentorId = @(ViewBag.RequestMentorId ?? "null");
            if (requestMentorId) {
                // Find the mentor and auto-open request modal
                const mentorCard = document.querySelector(`[data-mentor-id="${requestMentorId}"]`);
                if (mentorCard) {
                    const mentorName = mentorCard.getAttribute('data-mentor-name');
                    document.getElementById('modalMentorName').textContent = mentorName;
                    document.getElementById('mentorId').value = requestMentorId;
                    
                    // Set default date/time
                    const today = new Date();
                    const yyyy = today.getFullYear();
                    const mm = String(today.getMonth() + 1).padStart(2, '0');
                    const dd = String(today.getDate()).padStart(2, '0');
                    
                    document.getElementById('reqDate').min = `${yyyy}-${mm}-${dd}`;
                    document.getElementById('reqDate').value = `${yyyy}-${mm}-${dd}`;
                    document.getElementById('reqTime').value = "15:00";
                    
                    // Show the modal
                    const modal = new bootstrap.Modal(document.getElementById('requestModal'));
                    modal.show();
                }
            }
            
            // Setup request modal
            const requestModal = document.getElementById('requestModal');
            if (requestModal) {
                requestModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const mentorId = button.getAttribute('data-mentor-id');
                    const mentorName = button.getAttribute('data-mentor-name');

                    document.getElementById('modalMentorName').textContent = mentorName;
                    document.getElementById('mentorId').value = mentorId;

                    // Set default date/time
                    const today = new Date();
                    const yyyy = today.getFullYear();
                    const mm = String(today.getMonth() + 1).padStart(2, '0');
                    const dd = String(today.getDate()).padStart(2, '0');

                    document.getElementById('reqDate').min = `${yyyy}-${mm}-${dd}`;
                    document.getElementById('reqDate').value = `${yyyy}-${mm}-${dd}`;
                    document.getElementById('reqTime').value = "15:00";
                });
            }

            // Mark all notifications as read
            const markAllReadBtn = document.getElementById("markAllRead");
            if (markAllReadBtn) {
                markAllReadBtn.addEventListener('click', markAllNotificationsAsRead);
            }

            // Handle form submission with AJAX
            const requestForm = document.getElementById('requestForm');
            if (requestForm) {
                requestForm.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const formData = new FormData(this);
                    const data = {
                        MentorId: parseInt(formData.get('mentorId')),
                        Date: formData.get('date'),
                        Time: formData.get('time'),
                        Type: formData.get('type'),
                        Message: formData.get('message')
                    };

                    try {
                        const response = await fetch('@Url.Action("RequestSession", "MenteeDashboard")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();

                        if (result.success) {
                            showToast(result.message);
                            bootstrap.Modal.getInstance(document.getElementById('requestModal')).hide();
                            // Refresh page to update request count
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showToast(result.message, 'error');
                        }
                    } catch (error) {
                        showToast('Error sending request', 'error');
                    }
                });
            }
        });

        // Mark all notifications as read
        async function markAllNotificationsAsRead() {
            try {
                const response = await fetch('@Url.Action("MarkNotificationsAsRead", "MenteeDashboard")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message);
                    // Refresh the page to update notification count
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                showToast('Error marking notifications as read', 'error');
            }
        }

        function showToast(message, type = 'success') {
            const toastElement = document.getElementById('toast');
            const toastMsg = document.getElementById('toastMsg');

            if (toastElement && toastMsg) {
                toastMsg.textContent = message;
                toastElement.className = `toast align-items-center text-bg-${type === 'success' ? 'success' : 'danger'} border-0`;

                const toast = new bootstrap.Toast(toastElement);
                toast.show();
            }
        }
    </script>