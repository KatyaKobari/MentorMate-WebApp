<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MentorMate</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />

    <!-- Custom CSS -->
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/common.css" asp-append-version="true" />

    <style>
        html, body {
            height: 100%;
        }
        
        body {
            display: flex;
            flex-direction: column;
        }
        
        main {
            flex: 1;
        }
        
        .mm-nav {
            background: linear-gradient(90deg, #4169E1, #87CEFA);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .avatar-sm {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }
        
        .navbar-nav .nav-link {
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .navbar-nav .nav-link:hover {
            transform: translateY(-1px);
        }
        
        .dropdown-menu {
            border: none;
            box-shadow: 0 8px 28px rgba(0, 0, 0, 0.15);
            border-radius: 12px;
        }
        
        .dropdown-item {
            padding: 0.75rem 1rem;
            transition: all 0.2s ease;
        }
        
        .dropdown-item:hover {
            background-color: #f8f9fa;
            transform: translateX(5px);
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .navbar-brand {
                font-size: 1.2rem;
            }
            
            .nav-link {
                padding: 0.5rem 0.75rem;
            }
            
            .dropdown-menu {
                min-width: 280px;
            }
            
            .navbar-nav .nav-item {
                margin: 0.25rem 0;
            }
        }

        @@media (max-width: 576px) {
            .navbar-brand {
                font-size: 1rem;
            }
            
            .nav-link i {
                margin-right: 0.25rem;
            }
            
            .nav-link span {
                display: none;
            }
        }
    </style>

    <!-- Render additional styles from views -->
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark mm-nav">
        <div class="container">
            <a class="navbar-brand d-flex align-items-center" asp-controller="Home" asp-action="Index">
                <i class="bi bi-stars me-2"></i> MentorMate
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mmNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div id="mmNav" class="collapse navbar-collapse">
                <ul class="navbar-nav ms-auto align-items-lg-center gap-lg-2">
                    @if (Context.Session.GetInt32("UserId").HasValue)
                    {
                        var userRole = Context.Session.GetString("UserRole");
                        var userId = Context.Session.GetInt32("UserId").Value;
                        
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="@(userRole == "Mentor" ? "MentorDashBoard" : "MenteeDashBoard")" asp-action="Index">
                                <i class="bi bi-speedometer2 me-1"></i>Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Community" asp-action="MentorSpace">
                                <i class="bi bi-people me-1"></i>Mentor Space
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Chat" asp-action="Index">
                                <i class="bi bi-chat-dots me-1"></i>Chat
                            </a>
                        </li>
                        
                        <!-- Notifications -->
                        <li class="nav-item dropdown">
                            <a class="nav-link position-relative" href="#" data-bs-toggle="dropdown">
                                <i class="bi bi-bell fs-5"></i>
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationBadge" style="display: none;">
                                    0
                                </span>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end p-0" style="min-width:320px;">
                                <div class="px-3 py-2 border-bottom fw-semibold">Notifications</div>
                                <div class="list-group list-group-flush" style="max-height: 300px; overflow:auto;" id="notificationsList">
                                    <div class="p-3 text-center text-muted">Loading notifications...</div>
                                </div>
                                <div class="p-2 text-center">
                                    <button id="markAllRead" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-check2-all me-1"></i>Mark all as read
                                    </button>
                                </div>
                            </div>
                        </li>
                        
                        <!-- User Profile -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" data-bs-toggle="dropdown">
                                @{
                                    var userGender = Context.Session.GetString("UserGender") ?? "Male";
                                    var genderIcon = userGender == "Female" ? "bi-gender-female" : "bi-gender-male";
                                    var genderColor = userGender == "Female" ? "#e91e63" : "#2196f3";
                                }
                                <div class="avatar-sm me-2 d-flex align-items-center justify-content-center" style="background: @genderColor; color: white; border-radius: 50%; width: 40px; height: 40px;">
                                    <i class="bi @genderIcon fs-5"></i>
                                </div>
                                <span class="fw-semibold">@Context.Session.GetString("UserName") (@userRole)</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" asp-controller="@(userRole == "Mentor" ? "Mentor" : "Mentee")" asp-action="Profile"><i class="bi bi-person me-2"></i>My Profile</a></li>
                                <li><a class="dropdown-item" asp-controller="@(userRole == "Mentor" ? "Mentor" : "Mentee")" asp-action="EditProfile"><i class="bi bi-pencil-square me-2"></i>Edit Profile</a></li>
                                <li><hr class="dropdown-divider" /></li>
                                <li>
                                    <button type="button" class="dropdown-item btn btn-link text-start w-100" onclick="switchRoleSimple()" style="border: none; background: none; padding: 0.5rem 1rem;">
                                        <i class="bi bi-arrow-repeat me-2"></i>Switch to @(userRole == "Mentor" ? "Mentee" : "Mentor") Mode
                                        <small class="text-muted d-block">@(userRole == "Mentor" ? "Become a student and learn" : "Become a teacher and mentor")</small>
                                    </button>
                                </li>
                                <li><hr class="dropdown-divider" /></li>
                                <li><a class="dropdown-item text-danger" asp-controller="Account" asp-action="Logout"><i class="bi bi-box-arrow-right me-2"></i>Logout</a></li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Account" asp-action="Login">
                                <i class="bi bi-box-arrow-in-right me-1"></i>Login
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Account" asp-action="RegisterStep1">
                                <i class="bi bi-person-plus me-1"></i>Sign Up
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <!-- Footer -->
    <footer class="bg-light border-top mt-5">
        <div class="container py-4">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="text-primary fw-bold">MentorMate</h5>
                    <p class="text-muted mb-0">Connecting mentors with mentees to share knowledge and grow together.</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <div class="d-flex justify-content-md-end gap-3">
                        <a asp-controller="Home" asp-action="Contact" class="text-muted text-decoration-none">
                            <i class="bi bi-envelope me-1"></i> Contact
                        </a>
                        <a asp-controller="Home" asp-action="About" class="text-muted text-decoration-none">
                            <i class="bi bi-info-circle me-1"></i> About
                        </a>
                        <a asp-controller="Home" asp-action="Index" class="text-muted text-decoration-none">
                            <i class="bi bi-house-door me-1"></i> Home
                        </a>
                    </div>
                    <p class="text-muted small mt-2 mb-0">© 2025 MentorMate. All rights reserved.</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Render additional scripts from views -->
    @await RenderSectionAsync("Scripts", required: false)
    
    <!-- Ensure Bootstrap dropdowns work -->
    <script>
        // Global dropdown initialization function
        function initializeDropdowns() {
            try {
                if (typeof bootstrap !== 'undefined') {
                    // Get all dropdown toggles
                    var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
                    
                    // Initialize each dropdown
                    var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                        try {
                            return new bootstrap.Dropdown(dropdownToggleEl);
                        } catch (error) {
                            console.error('Error initializing dropdown:', error);
                            return null;
                        }
                    }).filter(function(dropdown) { return dropdown !== null; });
                    
                    console.log('Layout: Initialized', dropdownList.length, 'dropdowns');
                    return dropdownList.length;
                } else {
                    console.log('Bootstrap not available');
                    return 0;
                }
            } catch (error) {
                console.error('Error in initializeDropdowns:', error);
                return 0;
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('Layout: DOMContentLoaded fired');
            
            // Try to initialize dropdowns immediately
            var initializedCount = initializeDropdowns();
            console.log('Layout: Initialized', initializedCount, 'dropdowns on first try');
            
            // If no dropdowns were initialized, retry after delays
            if (initializedCount === 0) {
                setTimeout(function() {
                    console.log('Layout: Retrying dropdown initialization after 100ms');
                    initializeDropdowns();
                }, 100);
                
                setTimeout(function() {
                    console.log('Layout: Retrying dropdown initialization after 500ms');
                    initializeDropdowns();
                }, 500);
                
                setTimeout(function() {
                    console.log('Layout: Retrying dropdown initialization after 1000ms');
                    initializeDropdowns();
                }, 1000);
            }
        });
    </script>

    <!-- Notification functionality -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load notifications on page load
            loadNotifications();
            
            // Set up mark all as read functionality
            const markAllReadBtn = document.getElementById('markAllRead');
            if (markAllReadBtn) {
                markAllReadBtn.addEventListener('click', markAllNotificationsAsRead);
            }
            
            // Auto-refresh notifications every 30 seconds
            setInterval(loadNotifications, 30000);
        });

        async function loadNotifications() {
            try {
                // Determine which controller to use based on user role
                const userRole = '@Context.Session.GetString("UserRole")';
                const controller = userRole === 'Mentor' ? 'MentorDashBoard' : 'MenteeDashBoard';
                
                console.log('Loading notifications from controller:', controller);
                
                const response = await fetch(`/${controller}/GetNotifications`);
                
                if (!response.ok) {
                    console.error('Failed to load notifications:', response.status, response.statusText);
                    return;
                }
                
                const result = await response.json();
                
                if (result.success) {
                    updateNotificationsDisplay(result.data);
                } else {
                    console.error('Error in notification response:', result.message);
                }
            } catch (error) {
                console.error('Error loading notifications:', error);
            }
        }

        function updateNotificationsDisplay(notifications) {
            const notificationsList = document.getElementById('notificationsList');
            const notificationBadge = document.getElementById('notificationBadge');
            
            if (!notificationsList) return;
            
            const unreadCount = notifications.filter(n => !n.isRead).length;
            
            // Update badge
            if (notificationBadge) {
                if (unreadCount > 0) {
                    notificationBadge.textContent = unreadCount;
                    notificationBadge.style.display = 'block';
                } else {
                    notificationBadge.style.display = 'none';
                }
            }
            
            // Update notifications list
            if (notifications.length === 0) {
                notificationsList.innerHTML = '<div class="p-3 text-center text-muted">No notifications</div>';
            } else {
                notificationsList.innerHTML = notifications.map(notification => `
                    <a href="#" class="list-group-item list-group-item-action small ${notification.isRead ? '' : 'bg-light'}">
                        ${notification.message}
                        <br />
                        <small class="text-muted">${new Date(notification.createdAt).toLocaleString()}</small>
                    </a>
                `).join('');
            }
        }

        async function markAllNotificationsAsRead() {
            try {
                // Determine which controller to use based on user role
                const userRole = '@Context.Session.GetString("UserRole")';
                const controller = userRole === 'Mentor' ? 'MentorDashBoard' : 'MenteeDashBoard';
                
                const response = await fetch(`/${controller}/MarkNotificationsAsRead`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    // Refresh notifications
                    loadNotifications();
                }
            } catch (error) {
                console.log('Error marking notifications as read:', error);
            }
        }

        // Role switching function - new approach
        function confirmSwitchRole(event) {
            try {
                console.log('Switch role function called');
                
                // Check if user is logged in
                const userId = '@Context.Session.GetInt32("UserId")';
                const userRole = '@Context.Session.GetString("UserRole")';
                
                if (!userId || userId === '') {
                    console.error('User not logged in');
                    alert('You must be logged in to switch roles. Please log in first.');
                    event.preventDefault();
                    return false;
                }
                
                if (!userRole || userRole === '') {
                    console.error('User role not found in session');
                    alert('User role not found. Please log in again.');
                    event.preventDefault();
                    return false;
                }
                
                console.log(`User ID: ${userId}, Current Role: ${userRole}`);
                
                if (confirm('Are you sure you want to switch roles? This will redirect you to the appropriate dashboard.')) {
                    console.log('User confirmed role switch, proceeding...');
                    // Show loading indicator
                    const switchButton = event.target;
                    const originalText = switchButton.innerHTML;
                    switchButton.innerHTML = '<i class="bi bi-arrow-repeat me-2"></i>Switching...';
                    switchButton.style.pointerEvents = 'none';
                    
                    // Allow the default link behavior to proceed
                    return true;
                } else {
                    console.log('User cancelled role switch');
                    event.preventDefault();
                    return false;
                }
            } catch (error) {
                console.error('Error in confirmSwitchRole function:', error);
                alert('An error occurred while switching roles. Please try again.');
                event.preventDefault();
                return false;
            }
        }

        // Keep the old function for backward compatibility
        function switchRole() {
            console.log('Old switchRole function called - redirecting to new method');
            const switchButton = document.querySelector('button[onclick*="confirmSwitchRole"]');
            if (switchButton) {
                switchButton.click();
            }
        }

        // Simple role switching function
        function switchRoleSimple() {
            console.log('Simple switch role function called');
            var currentRole = '@Context.Session.GetString("UserRole")';
            var targetRole = currentRole === 'Mentor' ? 'Mentee' : 'Mentor';
            console.log('Current role:', currentRole, 'Target role:', targetRole);
            
            if (confirm('Are you sure you want to switch from ' + currentRole + ' to ' + targetRole + '? This will redirect you to the appropriate dashboard.')) {
                console.log('User confirmed role switch from', currentRole, 'to', targetRole);
                window.location.href = '/Account/SwitchRole';
            } else {
                console.log('User cancelled role switch');
            }
        }

        // Alternative method using AJAX
        function switchRoleAjax() {
            try {
                console.log('Switch role AJAX function called');
                
                // Check if user is logged in
                const userId = '@Context.Session.GetInt32("UserId")';
                const userRole = '@Context.Session.GetString("UserRole")';
                
                if (!userId || userId === '') {
                    console.error('User not logged in');
                    alert('You must be logged in to switch roles. Please log in first.');
                    return;
                }
                
                if (!userRole || userRole === '') {
                    console.error('User role not found in session');
                    alert('User role not found. Please log in again.');
                    return;
                }
                
                console.log(`User ID: ${userId}, Current Role: ${userRole}`);
                
                if (confirm('Are you sure you want to switch roles? This will redirect you to the appropriate dashboard.')) {
                    console.log('User confirmed role switch, making AJAX request...');
                    
                    // Show loading
                    const switchButton = event.target;
                    const originalText = switchButton.innerHTML;
                    switchButton.innerHTML = '<i class="bi bi-arrow-repeat me-2"></i>Switching...';
                    switchButton.disabled = true;
                    
                    // Make AJAX request
                    fetch('/Account/SwitchRole', {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            // Redirect to the response URL or reload the page
                            window.location.reload();
                        } else {
                            throw new Error('Network response was not ok');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while switching roles. Please try again.');
                        switchButton.innerHTML = originalText;
                        switchButton.disabled = false;
                    });
                } else {
                    console.log('User cancelled role switch');
                }
            } catch (error) {
                console.error('Error in switchRoleAjax function:', error);
                alert('An error occurred while switching roles. Please try again.');
            }
        }

        // Make functions globally available
        window.loadNotifications = loadNotifications;
        window.markAllNotificationsAsRead = markAllNotificationsAsRead;
        window.initializeDropdowns = initializeDropdowns;
        window.switchRole = switchRole;
        window.initializeNavbarDropdowns = function() {
            return initializeDropdowns();
        };

        // Show toast messages from TempData
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
            showToast('@Html.Raw(TempData["SuccessMessage"])', 'success');
            </text>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
            showToast('@Html.Raw(TempData["ErrorMessage"])', 'error');
            </text>
        }

        function showToast(message, type = 'success') {
            // Create toast element if it doesn't exist
            let toastElement = document.getElementById('toast');
            if (!toastElement) {
                toastElement = document.createElement('div');
                toastElement.id = 'toast';
                toastElement.className = 'toast align-items-center text-bg-success border-0';
                toastElement.setAttribute('role', 'alert');
                toastElement.setAttribute('aria-live', 'assertive');
                toastElement.setAttribute('aria-atomic', 'true');
                toastElement.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body" id="toastMsg">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
                document.body.appendChild(toastElement);
            }

            const toastMsg = document.getElementById('toastMsg');
            if (toastMsg) {
                toastMsg.textContent = message;
                toastElement.className = `toast align-items-center text-bg-${type === 'success' ? 'success' : 'danger'} border-0`;

                const toast = new bootstrap.Toast(toastElement);
                toast.show();
            }
        }
    </script>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="toastMsg">
                    <!-- Toast message will be inserted here -->
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</body>
</html>